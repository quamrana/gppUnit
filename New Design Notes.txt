New Design Notes

#$001	TestCase
	Interface where setup and teardown are virtual concrete empty methods.
	test() is just pure virtual.
	Sample TestCase can be called through the interface.
	
#$002	Runner
	Run the three methods of one test instance.
	There is not yet an idea of setup failing.

#$003	Run multiple tests
	Iterate through 2 or more test cases

#$004	Report Test Results
	Every method can report any number of Test Results
	Report the result through an interface. (Goes to notification)

#$005	Report starting and ending each method
	Report contains a method description:
	Name and number of results
	
#$006	Time individual methods
	Report the time through a separate interface. (Goes to description)
	Introduce an interface so that tests can supply a nominal time value,
	but real code can use a real timer.
	Description now reports name, number of results and time.

#$007	Test Result has full report
	Test Result consists of:
		boolean - summary
		tag msg - optional message from programmer
		description - automatically produced description of test.
	Add Result to Notification and make all Result methods take a TestResult.
	
#$008	Catch exceptions from all methods
	#Exceptions do not stop the time being reported on each method.
	#Report the exception text through a separate interface. (Goes to notification)
		std::exception
		std::string
		const char*
		int
		...
	(Future, allow a client to add their own catch clause).

#$009	Avoid running the test if setup catches an exception.
	Return a bool to indicate No Exception(true), Exception Caught(false)

#$010	Report each class
	The description reported has class name
	Class name should be sufficiently demangled.
		I will want to separate the namespace from the test name.
		This could allow 'collecting' tests within suites.

#$011	Enhance ClassDescription by reporting each called method.
	After EndMethod is notified, method data can be collected by ClassDescription
	ClassDescription should now also have:
		number of methods run (2 or 3)
		accumulated time
		number of test results.

#$012	Report whole project
	The description reported has project name, number of classes
	Plus accumulated time, plus number of test results.
	After EndClass is notified, data is collected by the ProjectDescription
	Make sure that these descriptions and runners are part of the source code and not in test code!
	Project must return bool as summary

#$013	Project can accept extra notification objects
	Implement this by creating a composite notification

#$014	Auto-Collect tests
	Tests can be collected to a global vector.
	The global vector is initially a static instance, but after main can be changed

#$015	Auto Options
	A free function creates a runner and supplies it with the auto-collected tests.
	This runner has a composite notification.
	Create a default options free function which supplies a console notification.
	(This function can be overridden at link time by the user)
	It should be possible for the user to supply:
		Project Name.
		A number of Notifications.

#$016	Hamcrest style matchers (I)
	Add TableFormatter
	Add 'confirm' and 'expect' and AssertException
	
#$017	Hamcrest style matchers (II)
	Implement a small set of matchers
		is_null
		equal_to
		greater_than
		is_not
	Integrate into Confirm
	

#$018	Self host
	Replace P1 with the project itself.
		Need a TestCaseBase
	Add a main which calls the auto runner.

#$019	Refit tests
	Rewrite the tests to use matchers where needed.
		TestAutoMethodTimer
		TestAutoTest
		TestCompositeNotification
		TestConfirm
		TestExceptionCatching
		TestGreaterThan
		TestIsNull
		TestWin32MethodTimer
		TestQuotesToParentheses
		TestStartEndClass
		TestStartEndMethod
		TestStartEndProject
		TestStreamNotification
		TestTableFormatter
		TestTestCase
		TestTestResult
		TestTimedMethod
		TestTypeInformation

#$020	Transfer to google code
	Consider moving TableFormatter and Matchers into their own libraries.
.		Make a branch for TableFormatter.
.		Make a branch for Matchers.
			Make equals+to_trait::rayString a non-inline member
				aperture
				ray
				elipsis
				fixedColumn
				segment
	Use vsprops files to make the projects more consistent
		4548	Expected expression with side-effect
		4623	Base class default constructor in inaccessible
		4640	Local static object not thread-safe
		4668	Undefined macro replaced with '0'
		4710	Function not inlined
		4820	Padding
		4996	strcpy unsafe
		
		4512;4250;4355;4996
	Disable additional warnings in test program
		4365	conversion from 'const size_t' to 'long', signed/unsigned mismatch
		4625	copy constructor could not be generated because a base class copy constructor is inaccessible
		4626	assignment operator could not be generated because a base class assignment operator is inaccessible
.	Create google code project
.	Licence files
.	Upload to google code



#$021	compile under cygwin and possibly MinGW
	Install cygwin
	Install gcc (still need to switch to gcc4.5)
	Install python
	Install scons
	Improve build (MethodTimer could be better)

#$022	Implement a more complete set of matchers
	Part one: Improve table streaming
.		less_than
.		equals within (double/float)
.		one_of

$023	Implement a more complete set of matchers
	Part Two: Re-check table streaming for more edge cases, or make it simpler
		all_of
		begins_with
		ends_with
		contains (strings)
		All the 'not's
		collections
			equals
			contains

$	Add whole project elapsed time

$	Doxys documentation

$	Google code wiki documentation

$	Catch exceptions from calls to notify

$	Allow Exception catchers which describe themselves.
	The user must be able to catch their own exceptions and then be allowed to describe them.
		Even when a test is written incorrectly it would be nice to have an unexpected exception describe itself.

$	Make sure Method and Class Descriptions can be copied and saved in vectors.

Infrastructure
#	Hudson
		Create a new job (copy previous one)
#	Scons
		Working from command line
#	cppCheck
		Just use batch command from Hudson
#	AStyle
		Needs to be command line only, but checked-in
		Copy astyle.options to src



#	ReportTime interface
.	MethodTimer interface
.		Test impl
.		Win32 impl
.		Win32 test
		unix impl
		unix test
		

cppcheck --enable=all --quiet -I src --xml src 2>cppcheck-result.xml
